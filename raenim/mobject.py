from manim import *

MOUSE = [
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [3, 100, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [1, 140, 200, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [1, 140, 255, 200, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [1, 140, 255, 255, 200, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [1, 140, 255, 255, 255, 200, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [1, 140, 255, 255, 255, 249, 200, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [1, 140, 255, 255, 255, 255, 244, 200, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [1, 140, 255, 255, 255, 255, 255, 240, 200, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [1, 140, 255, 255, 255, 255, 255, 255, 240, 200, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [1, 140, 255, 255, 255, 255, 255, 255, 255, 240, 200, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [1, 140, 255, 255, 255, 255, 255, 255, 255, 255, 240, 200, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [1, 140, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 200, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [1, 140, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 230, 200, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [1, 140, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 230, 200, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [1, 140, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 240, 200, 10, 0, 0, 0, 0, 0, 0, 0, 0],
    [1, 140, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 253, 250, 10, 0, 0, 0, 0, 0, 0, 0],
    [1, 140, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 237, 200, 10, 0, 0, 0, 0, 0, 0],
    [1, 140, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 250, 200, 10, 0, 0, 0, 0, 0],
    [1, 140, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 240, 200, 10, 0, 0, 0, 0],
    [1, 140, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 252, 240, 200, 10, 0, 0, 0],
    [1, 140, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 240, 200, 10, 0, 0],
    [1, 140, 255, 255, 255, 255, 255, 255, 255, 255, 255, 161, 118, 149, 164, 182, 197, 214, 227, 242, 247, 255, 255, 10, 0],
    [1, 140, 255, 255, 255, 255, 255, 140, 165, 222, 255, 174, 1, 1, 1, 1, 3, 17, 26, 34, 59, 59, 40, 10, 0],
    [1, 140, 255, 255, 255, 255, 140, 50, 1, 144, 255, 254, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [1, 140, 255, 255, 255, 140, 60, 0, 0, 56, 253, 255, 161, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [1, 140, 255, 255, 140, 50, 0, 0, 0, 2, 193, 255, 241, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [1, 140, 255, 140, 40, 0, 0, 0, 0, 0, 20, 255, 255, 129, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [1, 140, 140, 32, 0, 0, 0, 0, 0, 0, 21, 232, 255, 223, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [3, 140, 75, 0, 0, 0, 0, 0, 0, 0, 0, 20, 255, 255, 99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [8, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 252, 255, 199, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 193, 255, 255, 69, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 255, 255, 174, 40, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 231, 255, 247, 46, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 147, 255, 255, 30, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 253, 255, 248, 43, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 197, 255, 208, 50, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 50, 50, 50, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
]


class Mouse(ImageMobject):
    def __init__(self, *args, **kwargs):
        super().__init__(MOUSE, *args, **kwargs)
    
    def on(self, target):
        self.move_to(target)
        self.shift(RIGHT*0.1 + DOWN*0.2)


_surround_buf = DEFAULT_MOBJECT_TO_MOBJECT_BUFFER

class SurroundingRect(Rectangle):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)

    def surround(self, mobject, buff_h=_surround_buf, buff_w=_surround_buf):
        self.move_to(mobject)\
            .stretch_to_fit_height(mobject.height + buff_h)\
            .stretch_to_fit_width(mobject.width + buff_w)
        return self
    
class Chainer(VGroup):
    _chain_class = {
        "plain": Line,
        "dashedline": DashedLine,
        "arrow": Arrow
    }
    def __init__(self, *args, chain_type="plain", chain_kwargs={"buff":0}, **kwargs):
        super().__init__(**kwargs)
        if len(args) <= 1:
            raise ValueError("The number of args should be larger than one.")
        
        line_cls = self._chain_class.get(chain_type, "plain")
        for now_, next_ in zip(args[:-1], args[1:]):
            self.add(line_cls(now_, next_, **chain_kwargs))

class Joiner(VGroup):
    def __init__(self, *args, join: callable, **kwargs):
        self.join = join
        super().__init__(*args, **kwargs)
    
    def add(self, *args):
        for arg in args:
            if isinstance(arg, Mobject):
                super().add(self.join())
                super().add(arg)
            else:
                raise ValueError("Only Mobject can be added.")
        return self
    
class BrokenLine(VGroup):
    def __init__(self, *pos, arrow=False, **kwargs):
        assert len(pos) > 2
        super().__init__()
        starts = pos[:-1]
        ends = pos[1:]
        for i, (s, e) in enumerate(zip(starts, ends)):
            line_kwargs = kwargs.copy()
            if i != len(starts)-1:
                if arrow and "max_tip_length_to_length_ratio" in kwargs:
                    line_kwargs.pop("max_tip_length_to_length_ratio")
                self.add(Line(s, e, **line_kwargs))
            else:
                L = Arrow if arrow else Line
                self.add(L(s, e, buff=0, **line_kwargs))